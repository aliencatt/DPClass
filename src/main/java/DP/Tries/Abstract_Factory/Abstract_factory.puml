@startuml

interface Shape {
+ draw() : void
}
note left :  Shape Interface

class Circle
{

}
class Square
{

}
class Rectangle
{

}
Shape ..|> Circle : implements
Shape ..|> Square : implements
Shape ..|> Rectangle : implements

interface Color {
+ fill() : void
}
note right : Color Interface
 class Red
 {

 }
 class Green
 {

 }
 class Blue
 {

 }

 Color ..|> Red : implements
 Color ..|> Green : implements
 Color ..|> Blue : implements


 class ShapeFactory
 {
  +getShape() : Shape
 }
 class ColorFactory
 {
 +getColor() : Color
 }

class AbstractFactory
{
 +getShape() : Shape
 +getColor() : Color
}

class FactoryProducer
{
+getFactory() : AbstractFactory
}

class AbstractFactoryPatternDemo
{
+main() : void
}

AbstractFactoryPatternDemo ..> FactoryProducer : uses
FactoryProducer ..> AbstractFactory : uses
ShapeFactory --|> AbstractFactory : extends
ColorFactory --|> AbstractFactory : extends
ShapeFactory --> Shape : creates
ColorFactory --> Color : creates



@enduml